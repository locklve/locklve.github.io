<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>STM32H723-ADC</title>
      <link href="/2024/11/25/STM32H723_ADC/STM32H723-ADC/"/>
      <url>/2024/11/25/STM32H723_ADC/STM32H723-ADC/</url>
      
        <content type="html"><![CDATA[<h1 id="STM32H723ZGT6-Development-log01-ADC"><a href="#STM32H723ZGT6-Development-log01-ADC" class="headerlink" title="STM32H723ZGT6 Development log01 - ADC"></a><em><strong>STM32H723ZGT6 Development log01 - ADC</strong></em></h1><h2 id="What-is-ADC"><a href="#What-is-ADC" class="headerlink" title="What is ADC"></a><em><strong>What is ADC</strong></em></h2><p>The ADC, analog to digital conversion, is a tool to sample the analog values of voltage and transform to digital data. The range of digital data depends on the accuracy of ADC which can be 12bits, 14bits or even 16bits. The choices above are all provided in <em><strong>STM32H723ZGT6</strong></em> and I personally recommend to use 14bits which mean $ 0-2^{14} $. Above all, ADC is a tool that can sample the analog values and transform to digital stored in STM32 so that we can calculate its real value and process it.</p><h2 id="How-to-quickly-start-ADC"><a href="#How-to-quickly-start-ADC" class="headerlink" title="How to quickly start ADC"></a><em><strong>How to quickly start ADC</strong></em></h2><p>Due to its wide usage, there are different way to enable ADC and to sample value. We will introduce the mostly used three ways.</p><h3 id="ADC-TIM"><a href="#ADC-TIM" class="headerlink" title="ADC + TIM"></a><em><strong>ADC + TIM</strong></em></h3><p>The first way is to enable a <em><strong>TIMER</strong></em> as a external trigger which enable ADC to sample when the timer count to setting time. It means if you enable the TIM’s Auto-reload, then you will get sample values at the frequency of selected trigger timer. The comprehensive configuration is followed.</p><p><img src="/img/STM32H723-ADC/ADC1-Timer-single-conversion.png" alt="ADC1"></p><p>It is easy to configure in this way. <em><strong>Pay attention to the red block I circle!</strong></em> I will comprehensively introduce the use of those configuration so that you can make you own way to enable ADC sample.</p><ul><li><em><strong>Scan Conversion Mode</strong></em>: Disable when you only use one channel of selected ADC. The <em><strong>“Scan”</strong></em> means <em><strong><span style="color: red">Scan Multiple Channel</span></strong></em>. So if you sample many channels’s value, you need to enable Scan Mode.</li><li><em><strong>Continuous Conversion Mode</strong></em>: If you don’t use DMA or just sample one single values in one round conversion, you can disable the continuous conversion mode. What the continuous conversion means <em><strong><span style="color: red">if you want a list a data, then it will continuously sample the values until fulfill the list.</span></strong></em>. You can simply understand that it is continuous between two bits.</li><li><em><strong>DMA Circle</strong></em>: Similar to the continuous conversion mode mentioned above, the DMA circle mode also means continuous conversion. <em><strong><span style="color: red">But what is different is that the “continuous” means continuous conversion between two round!</span></strong></em>. It is said that if ADC finish to fill a list of data like data[128], then it will start next conversion of a list of data <em><strong>Automatically</strong></em> which will cover the data of last round.</li><li><em><strong>End of Conversion Selection</strong></em>: This configuration contains two choices. If you only use one channel to sample then the <em><strong>“End of single conversion”</strong></em> is fine. But if you use multiple channel to sample then you need to choose <em><strong>“End of sequence conversion”</strong></em> .</li><li><em><strong>Number of Conversion</strong></em>: The number of conversion is the number of channel that you choose.</li><li><em><strong>External Trigger Conversion Source</strong></em>: The most commonly used is <em><strong><span style="color: red">Timerx Trigger Out event or By software</span></strong></em> . The first choice is often used when you need to sample at some exact frequency, espacially in signal sample. And the latter simply enable the ADC by a code to start it. When you use the first choice, don’t forget to enable <em><strong>TIMx’s NVIC</strong></em> and configure update event which means if the clock is over than the <em><strong>TIMx</strong></em> will produce a update event and this event can drive the ADC to sample.</li><li><em><strong>External Trigger Conversion Edge</strong></em>: This usually use default settings.</li></ul><p>And the code you should write is also simple.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HAL_ADCEx_Calibration_Start(&amp;hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED); <span class="comment">// accurate adc(must)</span></span><br><span class="line">HAL_ADC_Start_IT(&amp;hadc1);</span><br><span class="line">HAL_TIM_Base_Start_IT(&amp;htim15);</span><br></pre></td></tr></table></figure><p>Through experiment verified, the first line of code is necessary, which accurate the value of sample. The rest of code is Start <em><strong>ADC IT</strong></em> and start <em><strong>TIM 15</strong></em> as trigger source.<br>And you can read values in ADC Callback function like:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_ADC_ConvCpltCallback</span><span class="params">(ADC_HandleTypeDef *hadc)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// single conversion IT sample </span></span><br><span class="line">  <span class="keyword">if</span> (hadc-&gt;Instance == ADC1)</span><br><span class="line">  &#123;</span><br><span class="line">    digital_v = HAL_ADC_GetValue(hadc);</span><br><span class="line">    Voltage = <span class="number">3.3</span> * digital_v / <span class="number">16384</span>;</span><br><span class="line">    HAL_ADC_Start_IT(hadc);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Remember to restart ADC if you want to continuous sample. I recommend you write the restart code in Callback function so that you ensure your ADC next conversion starts after the previous done.</p><h3 id="ADC-DMA"><a href="#ADC-DMA" class="headerlink" title="ADC + DMA"></a><em><strong>ADC + DMA</strong></em></h3><p>The second way is one-round sample a list of data with DMA triggered by software. The specific configuration is followed.</p><p><img src="/img/STM32H723-ADC/ADC2-DMA.png" alt="ADC2"></p><p>What is special of this configuration is that it only sample one round of a list of data like data[128]. The important point of the configuration is the configuration of DMA which is as followed.</p><p><img src="/img/STM32H723-ADC/ADC2-DMA-Normal.png" alt="ADC2_DMA"></p><p>In this way, we use Normal mode of DMA rather than Circle mode which mentioned above means continuously sample round and round, which reveals that when ADC finish sample tasks, you don’t need to restart ADC-DMA for next round of sample because it will start by itself. On the contrary, we configure Normal mode so if you want a new round of sample after last round, you should restart ADC-DMA in the Callback function or somewhere else.</p><p>Usually, this function is used when you want to preserve the data and make data process. For an example, you want to sample a list of data of signal and then do FFT or calculate the DC values of it. This way is suitable for you.</p><h3 id="ADC-DMA-TIM"><a href="#ADC-DMA-TIM" class="headerlink" title="ADC+DMA+TIM"></a><em><strong>ADC+DMA+TIM</strong></em></h3><p>In the last part of previous section, we have mentioned about the sample of signal. If you know some basic knowledge of signal sample, you should know the <em><strong>Nyquist Sample theory</strong></em> which says that the sample rate of a signal should be twice larger than the frequency of signal you want to sample so that you can do accurate FFT and recover its wave shape.</p><p>So we try to use TIM as an external trigger which we can set the time it trigger. And we configure the Circle mode of DMA which automatically enable ADC sample after one round so that we could get data continuously. The configuration is as followed.</p><p><img src="/img/STM32H723-ADC/ADC3-Timer-DMA-Circle.png" alt="ADC3"></p><p>The important part is choosing the TIM update event as a trigger. And the configuration of TIM please look back to <em><strong><span style="color: red">Section one: ADC+TIM</span></strong></em> . Then is the configuration of DMA which is configured as circle mode.</p><p><img src="/img/STM32H723-ADC/ADC3-DMA.png" alt="ADC3-DMA"></p><p><em><strong><span style="color: red; font-size: 20px">Attention!</span></strong></em> . You need to ensure the data width is <em><strong><span style="color: red">Half-word</span></strong></em> which is referred to <em><strong><span style="color: red">uint16_t</span></strong></em> . If you want to use <em><strong><span style="color: red">Word</span></strong></em> as you data width then you need to use <em><strong><span style="color: red">uint32_t</span></strong></em> as the size you list of data used.</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> ADC + TIM + DMA </tag>
            
            <tag> ADC + TIM </tag>
            
            <tag> ADC + DMA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LanQiao Baseboard Development&#39;s log03</title>
      <link href="/2024/11/22/LanQiao_Baseboard_04/ADC-Single-Conversion/"/>
      <url>/2024/11/22/LanQiao_Baseboard_04/ADC-Single-Conversion/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 嵌入式开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LanQiao </tag>
            
            <tag> STM32 </tag>
            
            <tag> ADC </tag>
            
            <tag> Single-Conversion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LanQiao Baseboard Development&#39;s log03</title>
      <link href="/2024/11/21/LanQiao_Baseboard_03/PWM_InputCapture/"/>
      <url>/2024/11/21/LanQiao_Baseboard_03/PWM_InputCapture/</url>
      
        <content type="html"><![CDATA[<h1 id="LanQiao-Baseboard-development’s-log-03"><a href="#LanQiao-Baseboard-development’s-log-03" class="headerlink" title="LanQiao Baseboard development’s log 03"></a><em><strong>LanQiao Baseboard development’s log 03</strong></em></h1><h2 id="PWM-Input-Capture-Mode-for-Frequency-and-Duty-Calculation"><a href="#PWM-Input-Capture-Mode-for-Frequency-and-Duty-Calculation" class="headerlink" title="PWM Input Capture Mode for Frequency and Duty Calculation"></a><em><strong>PWM Input Capture Mode for Frequency and Duty Calculation</strong></em></h2><h3 id="What-is-PWM-Input-Capture-Mode"><a href="#What-is-PWM-Input-Capture-Mode" class="headerlink" title="What is PWM Input Capture Mode"></a><em><strong>What is PWM Input Capture Mode</strong></em></h3><p>PWM input capture mode, is a special mode of TIM, which is especially useful in frequency measure. But you can’t use it occasionally because it needs a PWM input. Its original theory is below.</p><p><img src="/img/LanQiao-Baseboard03/LanQiao_Baseboard03_theory.png" alt="Theory"></p><h3 id="How-Can-We-Configure-the-Input-Capture-Mode"><a href="#How-Can-We-Configure-the-Input-Capture-Mode" class="headerlink" title="How Can We Configure the Input Capture Mode"></a><em><strong>How Can We Configure the Input Capture Mode</strong></em></h3><p>You should start the TIM input capture and rewrite the callback function. The original theory is when Timer detect the rising edge of PWM signal and then set the TIM counter to zero(Init). When the Timer check the falling edge, the TIM channel will store the counter values. So if Timer detect the second rising edge of PWM, you can read the value of channels which detect the rising edge and the falling edge.</p><p>As the counter values refer to the time between two rising edge, which means the time of a whole period, and the values between the first rising edge and falling edge is the time of high level. Based on the knowledge above, you can exactly understand how can we calculate the frequency and duty of PWM.</p><p>What’s more is that once you get the second rising edge values, you should set the counter of TIM to zeros and restart TIM input capture. And the configuration of TIM is as followed.</p><p><img src="/img/LanQiao-Baseboard03/LanQiao_Baseboard03_configure.png" alt="Configuration"></p><p>First, you need to select the source clock and select two channel, one is direct mode and the other is indirect mode. The counter value should be as large as possible because if the signal frequency is low and the counter value between two rising edge is very large, the second rising edge counter value may be smaller than the first one as the counter reloaded.</p><p>Second, you need to configure the indirect mode channel to falling edge to calculate the duty of PWM.</p><h3 id="How-to-Write-the-Code-of-PWM-Input-Capture"><a href="#How-to-Write-the-Code-of-PWM-Input-Capture" class="headerlink" title="How to Write the Code of PWM Input Capture"></a><em><strong>How to Write the Code of PWM Input Capture</strong></em></h3><p>Simply, you need to enable the TIM Channel.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HAL_TIM_IC_Start_IT(&amp;htim2, TIM_CHANNEL_1);</span><br><span class="line">HAL_TIM_IC_Start_IT(&amp;htim2, TIM_CHANNEL_2);</span><br><span class="line">HAL_TIM_IC_Start_IT(&amp;htim3, TIM_CHANNEL_1);</span><br><span class="line">HAL_TIM_IC_Start_IT(&amp;htim3, TIM_CHANNEL_2);</span><br></pre></td></tr></table></figure><p>Then, you should rewrite the TIM IC CallBack function. You can define the read-counter values as followed.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> Is_first_IC1 = <span class="number">1</span>;      <span class="comment">// Whether is firstly capture</span></span><br><span class="line"><span class="type">bool</span> Is_first_IC2 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> fir_count1 = <span class="number">0</span>;    <span class="comment">// The first IC TIM</span></span><br><span class="line"><span class="type">uint32_t</span> down_count1 = <span class="number">0</span>;</span><br><span class="line"><span class="type">uint32_t</span> sec_count1 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> fir_count2 = <span class="number">0</span>;    <span class="comment">// The second IC TIM</span></span><br><span class="line"><span class="type">uint32_t</span> down_count2 = <span class="number">0</span>;</span><br><span class="line"><span class="type">uint32_t</span> sec_count2 = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>And then is the main function.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_IC_CaptureCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (htim-&gt;Instance == TIM2)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (htim-&gt;Channel == HAL_TIM_ACTIVE_CHANNEL_1)</span><br><span class="line">    &#123;</span><br><span class="line">      fir_count1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);</span><br><span class="line">      sec_count1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);</span><br><span class="line">      __HAL_TIM_SetCounter(htim, <span class="number">0</span>);</span><br><span class="line">      HAL_TIM_IC_Start_IT(htim, TIM_CHANNEL_1);</span><br><span class="line">      HAL_TIM_IC_Start_IT(htim, TIM_CHANNEL_2);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (htim-&gt;Instance == TIM3)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (htim-&gt;Channel == HAL_TIM_ACTIVE_CHANNEL_1)</span><br><span class="line">    &#123;</span><br><span class="line">      fir_count2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);</span><br><span class="line">      sec_count2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  <span class="comment">// store when captured at falling edge</span></span><br><span class="line">      __HAL_TIM_SetCounter(htim, <span class="number">0</span>);</span><br><span class="line">      HAL_TIM_IC_Start_IT(htim, TIM_CHANNEL_1);</span><br><span class="line">      HAL_TIM_IC_Start_IT(htim, TIM_CHANNEL_2);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As the theory mentioned above shows, if the callback is from Channel 1(rising edge), read the values and reset the counter values. <span style="color: red; font-size: 20px">But Attention!</span> This code doesn’t care about the problem that if the frequency of signal is low and the counter value of the rising edge is smaller than the one of falling edge.</p><p>As for the duty, you can simply get it by dividing the rising edge value with the falling edge value.<br>$$ Freq &#x3D; \frac{F_{TIM}}{Counter_{fir}}$$<br>$$ Duty &#x3D; \frac{Counter_{sec}}{Counter_{fir}} $$</p><p>That is the whole content of PWM input capture. Thanks for watching!</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LanQiao </tag>
            
            <tag> STM32 </tag>
            
            <tag> PWM Input-Capture </tag>
            
            <tag> TIM direct&amp;Indirect Mode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LanQiao Baseboard Development&#39;s log02</title>
      <link href="/2024/11/20/LanQiao_Baseboard_02/PWM-Output/"/>
      <url>/2024/11/20/LanQiao_Baseboard_02/PWM-Output/</url>
      
        <content type="html"><![CDATA[<h1 id="LanQiao-Baseboard-development’s-log-02"><a href="#LanQiao-Baseboard-development’s-log-02" class="headerlink" title="LanQiao Baseboard development’s log 02"></a><em><strong>LanQiao Baseboard development’s log 02</strong></em></h1><h2 id="PWM-Output-with-Changeable-Duty"><a href="#PWM-Output-with-Changeable-Duty" class="headerlink" title="PWM Output with Changeable Duty"></a><em><strong>PWM Output with Changeable Duty</strong></em></h2><h3 id="PWM-Generate-and-Output"><a href="#PWM-Generate-and-Output" class="headerlink" title="PWM Generate and Output"></a><em><strong>PWM Generate and Output</strong></em></h3><p>PWM, simply regarded as square signal, is important in many aspects like motor driven or any thing that can change effect by the level of voltage. So how can we generate a PWM signal? </p><p>We can easily generate a PWM signal through our STM32’s TIM modules. The basic configure that you need to change is:</p><ul><li>First, Activate the TIM and choose a channel as PWM output channel. <span style="color: red; font-size: 20px">Attention!</span> You need to choose CHx rather CHxN which means the reverse of a normal signal. It will output low voltage when a normal PWM output high voltage.</li><li>Second, You should set the prescaler value and counter value. The TIM’s frequency is determined by the prescaler values, and the freq is $F_{pres} &#x3D; \frac{F_{main}}{prescaler+1}$. And the real freq of TIM you choosed is the frequency of prescaler divided by the counter value plus one. $F &#x3D; \frac{F_{pres}}{counter + 1}$.</li><li>Third, the counter means how many count in one period. So you can set the pulse value which should be smaller than the counter because the value $\frac{pulse}{counter}$ is the duty of the PWM.</li></ul><p>Above all is the basic configure of PWM settings.<br><img src="/img/LanQiao-Baseboard02/LanQiao_Baseboard02_configure.png" alt="PWM Configure"></p><h3 id="Code-and-Application-for-PWM"><a href="#Code-and-Application-for-PWM" class="headerlink" title="Code and Application for PWM"></a><em><strong>Code and Application for PWM</strong></em></h3><p>To start TIM channel to output PWM with certain duty, you only need to start TIM with one code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HAL_TIM_PWM_Start(&amp;htim16, TIM_CHANNEL_1);</span><br><span class="line">HAL_TIM_PWM_Start(&amp;htim17, TIM_CHANNEL_1);</span><br></pre></td></tr></table></figure><p>Here is two channels’ PWM output with different TIM and channels.</p><p>And now,let’s talk about ‘Duty’. What is duty and why is duty important? How can we change the duty of PWM generated by TIM.<br>Duty, is the percentage of high level in the total duration. As we all know that the capacity of driven is determined by high level, so if the duty gets larger, then the capacity is stronger, which means the LED will be lighter or the motor will rotate faster.<br>If you want change the lightness or the speed of cars, you can change the duty to achieve this. So how can we change it? We can change duty of certain TIM and certain channel by:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__HAL_TIM_SetCompare(&amp;htim16, TIM_CHANNEL_1, pwm1_duty);</span><br></pre></td></tr></table></figure><p>Param:</p><ul><li>&amp;htimx : The TIM of your PWM channel</li><li>TIM_CHANNEL_x : The Channel of your PWM</li><li>pwmx_duty : the duty you want to set. Must smaller than the counter values.</li></ul><p>You can define the values of different PWM output channels and apply key event to change duty. The exact code is as followed.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (keys[<span class="number">1</span>].Ispress)</span><br><span class="line">&#123;</span><br><span class="line">    pwm1_duty += <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (pwm1_duty &gt; <span class="number">90</span>) pwm1_duty = <span class="number">10</span>;</span><br><span class="line">    __HAL_TIM_SetCompare(&amp;htim16, TIM_CHANNEL_1, pwm1_duty);</span><br><span class="line">    keys[<span class="number">1</span>].Ispress = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> (keys[<span class="number">2</span>].Ispress)</span><br><span class="line">&#123;</span><br><span class="line">    pwm2_duty += <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (pwm2_duty &gt; <span class="number">90</span>) pwm2_duty = <span class="number">10</span>;</span><br><span class="line">    __HAL_TIM_SetCompare(&amp;htim17, TIM_CHANNEL_1, pwm2_duty);</span><br><span class="line">    keys[<span class="number">2</span>].Ispress = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>How keys function with this code you can read the <a href="https://locklve.github.io/2024/11/18/LanQiao_Baseboard_01/LED&LCD&Key-development/">last blog’s pt.3</a>. And due to the counter we set to 100, the duty(pulse) must be smaller than 100. And we concern about the death zone problem, which may cause low driven power problems, so we set the duty from 10 percentage to 90 percentage.</p><p>Moreover, we can achieve breathing LED by provide LED PWM with changed duty from low to high and from high to low.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (pwm_number == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (pwm1_duty = <span class="number">10</span>; pwm1_duty &lt; <span class="number">90</span>; pwm1_duty++)</span><br><span class="line">    &#123;</span><br><span class="line">        __HAL_TIM_SetCompare(&amp;htim16, TIM_CHANNEL_1, pwm1_duty);</span><br><span class="line">        HAL_Delay(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (pwm1_duty = <span class="number">90</span>; pwm1_duty &gt; <span class="number">10</span>; pwm1_duty--)</span><br><span class="line">    &#123;</span><br><span class="line">        __HAL_TIM_SetCompare(&amp;htim16, TIM_CHANNEL_1, pwm1_duty);</span><br><span class="line">        HAL_Delay(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The purpose of delay is to make the light of different duty visualize. And you can try the same code on motor, which effect is speeding up then slowing down.</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LanQiao </tag>
            
            <tag> STM32 </tag>
            
            <tag> PWM Output </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LanQiao Baseboard Development&#39;s log01</title>
      <link href="/2024/11/18/LanQiao_Baseboard_01/LED&amp;LCD&amp;Key-development/"/>
      <url>/2024/11/18/LanQiao_Baseboard_01/LED&amp;LCD&amp;Key-development/</url>
      
        <content type="html"><![CDATA[<h1 id="LanQiao-Baseboard-development’s-log-01"><a href="#LanQiao-Baseboard-development’s-log-01" class="headerlink" title="LanQiao Baseboard development’s log 01"></a>LanQiao Baseboard development’s log 01</h1><h2 id="LED、LCD-and-Key-quick-start"><a href="#LED、LCD-and-Key-quick-start" class="headerlink" title="LED、LCD and Key quick start"></a>LED、LCD and Key quick start</h2><h3 id="LED-LED-Display-and-Floating"><a href="#LED-LED-Display-and-Floating" class="headerlink" title="LED - LED Display and Floating"></a>LED - LED Display and Floating</h3><p><strong><em>The Pins to LED is show as followed.</em></strong><br><a href="/img/pin.png">Pins</a></p><p><strong><em>Due to The pin from PC8 to PC15 is used by both LED and LCD so there is D1 between pins and LEDs so that when PD2 is set to High, the value of pins can be also set to LED. Instead, if the PD2 is set to low, the value of pins only affect the LCD’s value.<br>So now we define the display function so that we can easily write the value of LED.</em></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> unsigned char uint8_t</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LED_Disp</span><span class="params">(<span class="type">uint8_t</span> disLED)</span></span><br><span class="line">&#123;</span><br><span class="line">  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_All, GPIO_PIN_SET);   <span class="comment">// Turn off all the led</span></span><br><span class="line">  HAL_GPIO_WritePin(GPIOC, disLED&lt;&lt;<span class="number">8</span>, GPIO_PIN_RESET);    <span class="comment">// Choose led(low 8th switch to high 8th) and turn on</span></span><br><span class="line">  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);     <span class="comment">// Set PD2 to high to enable D1(Lock)</span></span><br><span class="line">  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);   <span class="comment">// ...........low to disable</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>The main concept is:</em></strong><br><em><strong>First, Set the values of all pin which control the LED. Then set the PD2 to <span style="color:red; font-size:20px">High</span>. After that, lock down the value so that you can easily operate the LCD rather influence the LED.</strong></em></p><p><strong><em>Now, you can use the display function to create a floating mode.</em></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LED_Float</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 0000 0001 -&gt; 0000 0010 ...etc. If i = 1000 0000 Display the last time and exit.</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">0xf0</span>; i = i&lt;&lt;<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    LED_Disp(i);</span><br><span class="line">    HAL_Delay(<span class="number">100</span>);</span><br><span class="line">    LED_Disp(<span class="number">0x00</span>);     <span class="comment">// Clear the last LED</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>Floating, which means that the eight LED turn on and off one by one to make it looks like floating, requires controlling the LED’s sequence. You can write like:</em></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_GPIO_WritePin(GPIOC, GPIO_PIN_x, GPIO_PIN_SET);</span><br></pre></td></tr></table></figure><p><strong><em>and control its time sequence by yourselves but your code will become long and ugly. So this blog use the bit shift combine with loop. As you can see, the GPIO_Port such as GPIOC contains 16 pins, from PC0 to PC15.</em></strong></p><p><strong><em>And the number we can display in binary system:</em></strong></p><table><thead><tr><th>Col1</th><th>Col2</th></tr></thead><tbody><tr><td><strong><em>GPIO_PIN_0</em></strong></td><td><strong><em>GPIO_PIN_15</em></strong></td></tr><tr><td>0000 0000 0000 0001</td><td>1000 0000 0000 0000</td></tr></tbody></table><p><strong><em>In this way, I believe you can easily get to know why we can shift the bit(left side) to make each LED turn on. The PC0 refers to 0x01 and the PC15 refers to 0xf0. Everytime we want to turn the LED0~7 on, we only need to set the bits value that in the low eight position because we carry it to high eight position in our display function.</em></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_GPIO_WritePin(GPIOC, disLED&lt;&lt;<span class="number">8</span>, GPIO_PIN_RESET);    <span class="comment">// Choose led(low 8th switch to high 8th) and turn on</span></span><br></pre></td></tr></table></figure><p><strong><em>Then you can adjust the time of turning on to reach the final result you want. You can use the basic display function and the concept to generate your own display mode.</em></strong></p><h3 id="LCD-Display-and-show-Info"><a href="#LCD-Display-and-show-Info" class="headerlink" title="LCD - Display and show Info"></a>LCD - Display and show Info</h3><p><strong><em>The LCD original code is complex and difficult but it is lucky that we have the driver lib so all we need to do is transport it and use it.</em></strong></p><p><strong><em>In this blog we will support you with the driver lib file code and some most-use function with using tips.</em></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br></pre></td><td class="code"><pre><span class="line">/-----Driver Lib-----/</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;LCD.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Fonts.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span>  vu16 TextColor = <span class="number">0x0000</span>, BackColor = <span class="number">0xFFFF</span>;</span><br><span class="line">vu16 dummy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : Delay_LCD</span></span><br><span class="line"><span class="comment">* Description    : Inserts a delay time.</span></span><br><span class="line"><span class="comment">* Input          : nCount: specifies the delay time length.</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_LCD</span><span class="params">(u16 n)</span></span><br><span class="line">&#123;</span><br><span class="line">    u16 i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">3000</span>; ++j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">uC8230��Һ���������Ĵ�������</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">REG_8230_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    LCD_WriteReg(<span class="number">0x0000</span>, <span class="number">0x0001</span>);</span><br><span class="line">    Delay_LCD(<span class="number">1000</span>);</span><br><span class="line">    LCD_WriteReg(<span class="number">0x0001</span>, <span class="number">0x0000</span>);</span><br><span class="line">    LCD_WriteReg(<span class="number">0x0010</span>, <span class="number">0x1790</span>);</span><br><span class="line">    LCD_WriteReg(<span class="number">0x0060</span>, <span class="number">0x2700</span>);</span><br><span class="line">    LCD_WriteReg(<span class="number">0x0061</span>, <span class="number">0x0001</span>);</span><br><span class="line">    LCD_WriteReg(<span class="number">0x0046</span>, <span class="number">0x0002</span>);</span><br><span class="line">    LCD_WriteReg(<span class="number">0x0013</span>, <span class="number">0x8010</span>);</span><br><span class="line">    LCD_WriteReg(<span class="number">0x0012</span>, <span class="number">0x80fe</span>);</span><br><span class="line">    LCD_WriteReg(<span class="number">0x0002</span>, <span class="number">0x0500</span>);</span><br><span class="line">    LCD_WriteReg(<span class="number">0x0003</span>, <span class="number">0x1030</span>);</span><br><span class="line"></span><br><span class="line">    LCD_WriteReg(<span class="number">0x0030</span>, <span class="number">0x0303</span>);</span><br><span class="line">    LCD_WriteReg(<span class="number">0x0031</span>, <span class="number">0x0303</span>);</span><br><span class="line">    LCD_WriteReg(<span class="number">0x0032</span>, <span class="number">0x0303</span>);</span><br><span class="line">    LCD_WriteReg(<span class="number">0x0033</span>, <span class="number">0x0300</span>);</span><br><span class="line">    LCD_WriteReg(<span class="number">0x0034</span>, <span class="number">0x0003</span>);</span><br><span class="line">    LCD_WriteReg(<span class="number">0x0035</span>, <span class="number">0x0303</span>);</span><br><span class="line">    LCD_WriteReg(<span class="number">0x0036</span>, <span class="number">0x0014</span>);</span><br><span class="line">    LCD_WriteReg(<span class="number">0x0037</span>, <span class="number">0x0303</span>);</span><br><span class="line">    LCD_WriteReg(<span class="number">0x0038</span>, <span class="number">0x0303</span>);</span><br><span class="line">    LCD_WriteReg(<span class="number">0x0039</span>, <span class="number">0x0303</span>);</span><br><span class="line">    LCD_WriteReg(<span class="number">0x003a</span>, <span class="number">0x0300</span>);</span><br><span class="line">    LCD_WriteReg(<span class="number">0x003b</span>, <span class="number">0x0003</span>);</span><br><span class="line">    LCD_WriteReg(<span class="number">0x003c</span>, <span class="number">0x0303</span>);</span><br><span class="line">    LCD_WriteReg(<span class="number">0x003d</span>, <span class="number">0x1400</span>);</span><br><span class="line"></span><br><span class="line">    LCD_WriteReg(<span class="number">0x0092</span>, <span class="number">0x0200</span>);</span><br><span class="line">    LCD_WriteReg(<span class="number">0x0093</span>, <span class="number">0x0303</span>);</span><br><span class="line">    LCD_WriteReg(<span class="number">0x0090</span>, <span class="number">0x080d</span>);</span><br><span class="line">    LCD_WriteReg(<span class="number">0x0003</span>, <span class="number">0x1018</span>);</span><br><span class="line">    LCD_WriteReg(<span class="number">0x0007</span>, <span class="number">0x0173</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">REG_932X_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    LCD_WriteReg(R227, <span class="number">0x3008</span>);   <span class="comment">// Set internal timing</span></span><br><span class="line">    LCD_WriteReg(R231, <span class="number">0x0012</span>); <span class="comment">// Set internal timing</span></span><br><span class="line">    LCD_WriteReg(R239, <span class="number">0x1231</span>);   <span class="comment">// Set internal timing</span></span><br><span class="line">    LCD_WriteReg(R1, <span class="number">0x0000</span>);   <span class="comment">// set SS and SM bit  //0x0100</span></span><br><span class="line">    LCD_WriteReg(R2, <span class="number">0x0700</span>);   <span class="comment">// set 1 line inversion</span></span><br><span class="line">    LCD_WriteReg(R3, <span class="number">0x1030</span>);     <span class="comment">// set GRAM write direction and BGR=1.</span></span><br><span class="line">    LCD_WriteReg(R4, <span class="number">0x0000</span>);     <span class="comment">// Resize register</span></span><br><span class="line">    LCD_WriteReg(R8, <span class="number">0x0207</span>);     <span class="comment">// set the back porch and front porch</span></span><br><span class="line">    LCD_WriteReg(R9, <span class="number">0x0000</span>);     <span class="comment">// set non-display area refresh cycle ISC[3:0]</span></span><br><span class="line">    LCD_WriteReg(R10, <span class="number">0x0000</span>);    <span class="comment">// FMARK function</span></span><br><span class="line">    LCD_WriteReg(R12, <span class="number">0x0000</span>);  <span class="comment">// RGB interface setting</span></span><br><span class="line">    LCD_WriteReg(R13, <span class="number">0x0000</span>);    <span class="comment">// Frame marker Position</span></span><br><span class="line">    LCD_WriteReg(R15, <span class="number">0x0000</span>);  <span class="comment">// RGB interface polarity</span></span><br><span class="line">    <span class="comment">/**************Power On sequence ****************/</span></span><br><span class="line">    LCD_WriteReg(R16, <span class="number">0x0000</span>);    <span class="comment">// SAP, BT[3:0], AP, DSTB, SLP, STB</span></span><br><span class="line">    LCD_WriteReg(R17, <span class="number">0x0007</span>);    <span class="comment">// DC1[2:0], DC0[2:0], VC[2:0]</span></span><br><span class="line">    LCD_WriteReg(R18, <span class="number">0x0000</span>);  <span class="comment">// VREG1OUT voltage</span></span><br><span class="line">    LCD_WriteReg(R19, <span class="number">0x0000</span>);    <span class="comment">// VDV[4:0] for VCOM amplitude</span></span><br><span class="line">    <span class="comment">//Delay_Ms(200);                    // Delay 200 MS , Dis-charge capacitor power voltage</span></span><br><span class="line">    HAL_Delay(<span class="number">200</span>);</span><br><span class="line">    LCD_WriteReg(R16, <span class="number">0x1690</span>);    <span class="comment">// SAP, BT[3:0], AP, DSTB, SLP, STB</span></span><br><span class="line">    LCD_WriteReg(R17, <span class="number">0x0227</span>);  <span class="comment">// R11H=0x0221 at VCI=3.3V, DC1[2:0], DC0[2:0], VC[2:0]</span></span><br><span class="line">    <span class="comment">//Delay_Ms(50);      // Delay 50ms</span></span><br><span class="line">    HAL_Delay(<span class="number">50</span>);</span><br><span class="line">    LCD_WriteReg(R18, <span class="number">0x001D</span>);  <span class="comment">// External reference voltage= Vci;</span></span><br><span class="line">    <span class="comment">//Delay_Ms(50);      // Delay 50ms</span></span><br><span class="line">    HAL_Delay(<span class="number">50</span>);</span><br><span class="line">    LCD_WriteReg(R19, <span class="number">0x0800</span>);  <span class="comment">// R13H=1D00 when R12H=009D;VDV[4:0] for VCOM amplitude</span></span><br><span class="line">    LCD_WriteReg(R41, <span class="number">0x0014</span>);  <span class="comment">// R29H=0013 when R12H=009D;VCM[5:0] for VCOMH</span></span><br><span class="line">    LCD_WriteReg(R43, <span class="number">0x000B</span>);    <span class="comment">// Frame Rate = 96Hz</span></span><br><span class="line">    <span class="comment">//Delay_Ms(50);      // Delay 50ms</span></span><br><span class="line">    HAL_Delay(<span class="number">50</span>);</span><br><span class="line">    LCD_WriteReg(R32, <span class="number">0x0000</span>);  <span class="comment">// GRAM horizontal Address</span></span><br><span class="line">    LCD_WriteReg(R33, <span class="number">0x0000</span>);  <span class="comment">// GRAM Vertical Address</span></span><br><span class="line">    <span class="comment">/* ----------- Adjust the Gamma Curve ---------- */</span></span><br><span class="line">    LCD_WriteReg(R48, <span class="number">0x0007</span>);</span><br><span class="line">    LCD_WriteReg(R49, <span class="number">0x0707</span>);</span><br><span class="line">    LCD_WriteReg(R50, <span class="number">0x0006</span>);</span><br><span class="line">    LCD_WriteReg(R53, <span class="number">0x0704</span>);</span><br><span class="line">    LCD_WriteReg(R54, <span class="number">0x1F04</span>);</span><br><span class="line">    LCD_WriteReg(R55, <span class="number">0x0004</span>);</span><br><span class="line">    LCD_WriteReg(R56, <span class="number">0x0000</span>);</span><br><span class="line">    LCD_WriteReg(R57, <span class="number">0x0706</span>);</span><br><span class="line">    LCD_WriteReg(R60, <span class="number">0x0701</span>);</span><br><span class="line">    LCD_WriteReg(R61, <span class="number">0x000F</span>);</span><br><span class="line">    <span class="comment">/* ------------------ Set GRAM area --------------- */</span></span><br><span class="line">    LCD_WriteReg(R80, <span class="number">0x0000</span>);    <span class="comment">// Horizontal GRAM Start Address</span></span><br><span class="line">    LCD_WriteReg(R81, <span class="number">0x00EF</span>);    <span class="comment">// Horizontal GRAM End Address</span></span><br><span class="line">    LCD_WriteReg(R82, <span class="number">0x0000</span>);  <span class="comment">// Vertical GRAM Start Address</span></span><br><span class="line">    LCD_WriteReg(R83, <span class="number">0x013F</span>);  <span class="comment">// Vertical GRAM Start Address</span></span><br><span class="line">    LCD_WriteReg(R96, <span class="number">0x2700</span>);  <span class="comment">// Gate Scan Line  0xA700</span></span><br><span class="line">    LCD_WriteReg(R97, <span class="number">0x0001</span>);  <span class="comment">// NDL,VLE, REV</span></span><br><span class="line">    LCD_WriteReg(R106, <span class="number">0x0000</span>); <span class="comment">// set scrolling line</span></span><br><span class="line">    <span class="comment">/* -------------- Partial Display Control --------- */</span></span><br><span class="line">    LCD_WriteReg(R128, <span class="number">0x0000</span>);</span><br><span class="line">    LCD_WriteReg(R129, <span class="number">0x0000</span>);</span><br><span class="line">    LCD_WriteReg(R130, <span class="number">0x0000</span>);</span><br><span class="line">    LCD_WriteReg(R131, <span class="number">0x0000</span>);</span><br><span class="line">    LCD_WriteReg(R132, <span class="number">0x0000</span>);</span><br><span class="line">    LCD_WriteReg(R133, <span class="number">0x0000</span>);</span><br><span class="line">    <span class="comment">/* -------------- Panel Control ------------------- */</span></span><br><span class="line">    LCD_WriteReg(R144, <span class="number">0x0010</span>);</span><br><span class="line">    LCD_WriteReg(R146, <span class="number">0x0000</span>);</span><br><span class="line">    LCD_WriteReg(R147, <span class="number">0x0003</span>);</span><br><span class="line">    LCD_WriteReg(R149, <span class="number">0x0110</span>);</span><br><span class="line">    LCD_WriteReg(R151, <span class="number">0x0000</span>);</span><br><span class="line">    LCD_WriteReg(R152, <span class="number">0x0000</span>);</span><br><span class="line">    <span class="comment">/* Set GRAM write direction and BGR = 1 */</span></span><br><span class="line">    <span class="comment">/* I/D=01 (Horizontal : increment, Vertical : decrement) */</span></span><br><span class="line">    <span class="comment">/* AM=1 (address is updated in vertical writing direction) */</span></span><br><span class="line">    LCD_WriteReg(R3, <span class="number">0x01018</span>);    <span class="comment">//0x1018</span></span><br><span class="line"></span><br><span class="line">    LCD_WriteReg(R7, <span class="number">0x0173</span>);   <span class="comment">// 262K color and display ON</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : STM3210B_LCD_Init</span></span><br><span class="line"><span class="comment">* Description    : Initializes the LCD.</span></span><br><span class="line"><span class="comment">* Input          : None</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    LCD_CtrlLinesConfig();</span><br><span class="line">    dummy = LCD_ReadReg(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(dummy == <span class="number">0x8230</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        REG_8230_Init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        REG_932X_Init();</span><br><span class="line">    &#125;</span><br><span class="line">    dummy = LCD_ReadReg(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : LCD_SetTextColor</span></span><br><span class="line"><span class="comment">* Description    : Sets the Text color.</span></span><br><span class="line"><span class="comment">* Input          : - Color: specifies the Text color code RGB(5-6-5).</span></span><br><span class="line"><span class="comment">* Output         : - TextColor: Text color global variable used by LCD_DrawChar</span></span><br><span class="line"><span class="comment">*                  and LCD_DrawPicture functions.</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_SetTextColor</span><span class="params">(vu16 Color)</span></span><br><span class="line">&#123;</span><br><span class="line">    TextColor = Color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : LCD_SetBackColor</span></span><br><span class="line"><span class="comment">* Description    : Sets the Background color.</span></span><br><span class="line"><span class="comment">* Input          : - Color: specifies the Background color code RGB(5-6-5).</span></span><br><span class="line"><span class="comment">* Output         : - BackColor: Background color global variable used by</span></span><br><span class="line"><span class="comment">*                  LCD_DrawChar and LCD_DrawPicture functions.</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_SetBackColor</span><span class="params">(vu16 Color)</span></span><br><span class="line">&#123;</span><br><span class="line">    BackColor = Color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : LCD_ClearLine</span></span><br><span class="line"><span class="comment">* Description    : Clears the selected line.</span></span><br><span class="line"><span class="comment">* Input          : - Line: the Line to be cleared.</span></span><br><span class="line"><span class="comment">*                    This parameter can be one of the following values:</span></span><br><span class="line"><span class="comment">*                       - Linex: where x can be 0..9</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_ClearLine</span><span class="params">(u8 Line)</span></span><br><span class="line">&#123;</span><br><span class="line">    LCD_DisplayStringLine(Line, <span class="string">&quot;                    &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : LCD_Clear</span></span><br><span class="line"><span class="comment">* Description    : Clears the hole LCD.</span></span><br><span class="line"><span class="comment">* Input          : Color: the color of the background.</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_Clear</span><span class="params">(u16 Color)</span></span><br><span class="line">&#123;</span><br><span class="line">    u32 index = <span class="number">0</span>;</span><br><span class="line">    LCD_SetCursor(<span class="number">0x00</span>, <span class="number">0x0000</span>);</span><br><span class="line">    LCD_WriteRAM_Prepare(); <span class="comment">/* Prepare to write GRAM */</span></span><br><span class="line">    <span class="keyword">for</span>(index = <span class="number">0</span>; index &lt; <span class="number">76800</span>; index++)</span><br><span class="line">    &#123;</span><br><span class="line">        LCD_WriteRAM(Color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : LCD_SetCursor</span></span><br><span class="line"><span class="comment">* Description    : Sets the cursor position.</span></span><br><span class="line"><span class="comment">* Input          : - Xpos: specifies the X position.</span></span><br><span class="line"><span class="comment">*                  - Ypos: specifies the Y position.</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_SetCursor</span><span class="params">(u8 Xpos, u16 Ypos)</span></span><br><span class="line">&#123;</span><br><span class="line">    LCD_WriteReg(R32, Xpos);</span><br><span class="line">    LCD_WriteReg(R33, Ypos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : LCD_DrawChar</span></span><br><span class="line"><span class="comment">* Description    : Draws a character on LCD.</span></span><br><span class="line"><span class="comment">* Input          : - Xpos: the Line where to display the character shape.</span></span><br><span class="line"><span class="comment">*                    This parameter can be one of the following values:</span></span><br><span class="line"><span class="comment">*                       - Linex: where x can be 0..9</span></span><br><span class="line"><span class="comment">*                  - Ypos: start column address.</span></span><br><span class="line"><span class="comment">*                  - c: pointer to the character data.</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_DrawChar</span><span class="params">(u8 Xpos, u16 Ypos, uc16 *c)</span></span><br><span class="line">&#123;</span><br><span class="line">    u32 index = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">    u8 Xaddress = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    Xaddress = Xpos;</span><br><span class="line">    LCD_SetCursor(Xaddress, Ypos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(index = <span class="number">0</span>; index &lt; <span class="number">24</span>; index++)</span><br><span class="line">    &#123;</span><br><span class="line">        LCD_WriteRAM_Prepare(); <span class="comment">/* Prepare to write GRAM */</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((c[index] &amp; (<span class="number">1</span> &lt;&lt; i)) == <span class="number">0x00</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                LCD_WriteRAM(BackColor);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                LCD_WriteRAM(TextColor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Xaddress++;</span><br><span class="line">        LCD_SetCursor(Xaddress, Ypos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : LCD_DisplayChar</span></span><br><span class="line"><span class="comment">* Description    : Displays one character (16dots width, 24dots height).</span></span><br><span class="line"><span class="comment">* Input          : - Line: the Line where to display the character shape .</span></span><br><span class="line"><span class="comment">*                    This parameter can be one of the following values:</span></span><br><span class="line"><span class="comment">*                       - Linex: where x can be 0..9</span></span><br><span class="line"><span class="comment">*                  - Column: start column address.</span></span><br><span class="line"><span class="comment">*                  - Ascii: character ascii code, must be between 0x20 and 0x7E.</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_DisplayChar</span><span class="params">(u8 Line, u16 Column, u8 Ascii)</span></span><br><span class="line">&#123;</span><br><span class="line">    Ascii -= <span class="number">32</span>;</span><br><span class="line">    LCD_DrawChar(Line, Column, &amp;ASCII_Table[Ascii * <span class="number">24</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : LCD_DisplayStringLine</span></span><br><span class="line"><span class="comment">* Description    : Displays a maximum of 20 char on the LCD.</span></span><br><span class="line"><span class="comment">* Input          : - Line: the Line where to display the character shape .</span></span><br><span class="line"><span class="comment">*                    This parameter can be one of the following values:</span></span><br><span class="line"><span class="comment">*                       - Linex: where x can be 0..9</span></span><br><span class="line"><span class="comment">*                  - *ptr: pointer to string to display on LCD.</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_DisplayStringLine</span><span class="params">(u8 Line, u8 *ptr)</span></span><br><span class="line">&#123;</span><br><span class="line">    u32 i = <span class="number">0</span>;</span><br><span class="line">    u16 refcolumn = <span class="number">319</span>;<span class="comment">//319;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((*ptr != <span class="number">0</span>) &amp;&amp; (i &lt; <span class="number">20</span>)) <span class="comment">//20</span></span><br><span class="line">    &#123;</span><br><span class="line">        LCD_DisplayChar(Line, refcolumn, *ptr);</span><br><span class="line">        refcolumn -= <span class="number">16</span>;</span><br><span class="line">        ptr++;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : LCD_SetDisplayWindow</span></span><br><span class="line"><span class="comment">* Description    : Sets a display window</span></span><br><span class="line"><span class="comment">* Input          : - Xpos: specifies the X buttom left position.</span></span><br><span class="line"><span class="comment">*                  - Ypos: specifies the Y buttom left position.</span></span><br><span class="line"><span class="comment">*                  - Height: display window height.</span></span><br><span class="line"><span class="comment">*                  - Width: display window width.</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_SetDisplayWindow</span><span class="params">(u8 Xpos, u16 Ypos, u8 Height, u16 Width)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(Xpos &gt;= Height)</span><br><span class="line">    &#123;</span><br><span class="line">        LCD_WriteReg(R80, (Xpos - Height + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        LCD_WriteReg(R80, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    LCD_WriteReg(R81, Xpos);</span><br><span class="line">    <span class="keyword">if</span>(Ypos &gt;= Width)</span><br><span class="line">    &#123;</span><br><span class="line">        LCD_WriteReg(R82, (Ypos - Width + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        LCD_WriteReg(R82, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* Vertical GRAM End Address */</span></span><br><span class="line">    LCD_WriteReg(R83, Ypos);</span><br><span class="line">    LCD_SetCursor(Xpos, Ypos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : LCD_WindowModeDisable</span></span><br><span class="line"><span class="comment">* Description    : Disables LCD Window mode.</span></span><br><span class="line"><span class="comment">* Input          : None</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_WindowModeDisable</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    LCD_SetDisplayWindow(<span class="number">239</span>, <span class="number">0x13F</span>, <span class="number">240</span>, <span class="number">320</span>);</span><br><span class="line">    LCD_WriteReg(R3, <span class="number">0x1018</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : LCD_DrawLine</span></span><br><span class="line"><span class="comment">* Description    : Displays a line.</span></span><br><span class="line"><span class="comment">* Input          : - Xpos: specifies the X position.</span></span><br><span class="line"><span class="comment">*                  - Ypos: specifies the Y position.</span></span><br><span class="line"><span class="comment">*                  - Length: line length.</span></span><br><span class="line"><span class="comment">*                  - Direction: line direction.</span></span><br><span class="line"><span class="comment">*                    This parameter can be one of the following values: Vertical</span></span><br><span class="line"><span class="comment">*                    or Horizontal.</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_DrawLine</span><span class="params">(u8 Xpos, u16 Ypos, u16 Length, u8 Direction)</span></span><br><span class="line">&#123;</span><br><span class="line">    u32 i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    LCD_SetCursor(Xpos, Ypos);</span><br><span class="line">    <span class="keyword">if</span>(Direction == Horizontal)</span><br><span class="line">    &#123;</span><br><span class="line">        LCD_WriteRAM_Prepare(); <span class="comment">/* Prepare to write GRAM */</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            LCD_WriteRAM(TextColor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            LCD_WriteRAM_Prepare(); <span class="comment">/* Prepare to write GRAM */</span></span><br><span class="line">            LCD_WriteRAM(TextColor);</span><br><span class="line">            Xpos++;</span><br><span class="line">            LCD_SetCursor(Xpos, Ypos);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : LCD_DrawRect</span></span><br><span class="line"><span class="comment">* Description    : Displays a rectangle.</span></span><br><span class="line"><span class="comment">* Input          : - Xpos: specifies the X position.</span></span><br><span class="line"><span class="comment">*                  - Ypos: specifies the Y position.</span></span><br><span class="line"><span class="comment">*                  - Height: display rectangle height.</span></span><br><span class="line"><span class="comment">*                  - Width: display rectangle width.</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_DrawRect</span><span class="params">(u8 Xpos, u16 Ypos, u8 Height, u16 Width)</span></span><br><span class="line">&#123;</span><br><span class="line">    LCD_DrawLine(Xpos, Ypos, Width, Horizontal);</span><br><span class="line">    LCD_DrawLine((Xpos + Height), Ypos, Width, Horizontal);</span><br><span class="line"></span><br><span class="line">    LCD_DrawLine(Xpos, Ypos, Height, Vertical);</span><br><span class="line">    LCD_DrawLine(Xpos, (Ypos - Width + <span class="number">1</span>), Height, Vertical);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : LCD_DrawCircle</span></span><br><span class="line"><span class="comment">* Description    : Displays a circle.</span></span><br><span class="line"><span class="comment">* Input          : - Xpos: specifies the X position.</span></span><br><span class="line"><span class="comment">*                  - Ypos: specifies the Y position.</span></span><br><span class="line"><span class="comment">*                  - Height: display rectangle height.</span></span><br><span class="line"><span class="comment">*                  - Width: display rectangle width.</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_DrawCircle</span><span class="params">(u8 Xpos, u16 Ypos, u16 Radius)</span></span><br><span class="line">&#123;</span><br><span class="line">    s32  D;</span><br><span class="line">    u32  CurX;</span><br><span class="line">    u32  CurY;</span><br><span class="line"></span><br><span class="line">    D = <span class="number">3</span> - (Radius &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    CurX = <span class="number">0</span>;</span><br><span class="line">    CurY = Radius;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (CurX &lt;= CurY)</span><br><span class="line">    &#123;</span><br><span class="line">        LCD_SetCursor(Xpos + CurX, Ypos + CurY);</span><br><span class="line">        LCD_WriteRAM_Prepare(); <span class="comment">/* Prepare to write GRAM */</span></span><br><span class="line">        LCD_WriteRAM(TextColor);</span><br><span class="line"></span><br><span class="line">        LCD_SetCursor(Xpos + CurX, Ypos - CurY);</span><br><span class="line">        LCD_WriteRAM_Prepare(); <span class="comment">/* Prepare to write GRAM */</span></span><br><span class="line">        LCD_WriteRAM(TextColor);</span><br><span class="line"></span><br><span class="line">        LCD_SetCursor(Xpos - CurX, Ypos + CurY);</span><br><span class="line">        LCD_WriteRAM_Prepare(); <span class="comment">/* Prepare to write GRAM */</span></span><br><span class="line">        LCD_WriteRAM(TextColor);</span><br><span class="line"></span><br><span class="line">        LCD_SetCursor(Xpos - CurX, Ypos - CurY);</span><br><span class="line">        LCD_WriteRAM_Prepare(); <span class="comment">/* Prepare to write GRAM */</span></span><br><span class="line">        LCD_WriteRAM(TextColor);</span><br><span class="line"></span><br><span class="line">        LCD_SetCursor(Xpos + CurY, Ypos + CurX);</span><br><span class="line">        LCD_WriteRAM_Prepare(); <span class="comment">/* Prepare to write GRAM */</span></span><br><span class="line">        LCD_WriteRAM(TextColor);</span><br><span class="line"></span><br><span class="line">        LCD_SetCursor(Xpos + CurY, Ypos - CurX);</span><br><span class="line">        LCD_WriteRAM_Prepare(); <span class="comment">/* Prepare to write GRAM */</span></span><br><span class="line">        LCD_WriteRAM(TextColor);</span><br><span class="line"></span><br><span class="line">        LCD_SetCursor(Xpos - CurY, Ypos + CurX);</span><br><span class="line">        LCD_WriteRAM_Prepare(); <span class="comment">/* Prepare to write GRAM */</span></span><br><span class="line">        LCD_WriteRAM(TextColor);</span><br><span class="line"></span><br><span class="line">        LCD_SetCursor(Xpos - CurY, Ypos - CurX);</span><br><span class="line">        LCD_WriteRAM_Prepare(); <span class="comment">/* Prepare to write GRAM */</span></span><br><span class="line">        LCD_WriteRAM(TextColor);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (D &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            D += (CurX &lt;&lt; <span class="number">2</span>) + <span class="number">6</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            D += ((CurX - CurY) &lt;&lt; <span class="number">2</span>) + <span class="number">10</span>;</span><br><span class="line">            CurY--;</span><br><span class="line">        &#125;</span><br><span class="line">        CurX++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : LCD_DrawMonoPict</span></span><br><span class="line"><span class="comment">* Description    : Displays a monocolor picture.</span></span><br><span class="line"><span class="comment">* Input          : - Pict: pointer to the picture array.</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_DrawMonoPict</span><span class="params">(uc32 *Pict)</span></span><br><span class="line">&#123;</span><br><span class="line">    u32 index = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    LCD_SetCursor(<span class="number">0</span>, <span class="number">319</span>);</span><br><span class="line"></span><br><span class="line">    LCD_WriteRAM_Prepare(); <span class="comment">/* Prepare to write GRAM */</span></span><br><span class="line">    <span class="keyword">for</span>(index = <span class="number">0</span>; index &lt; <span class="number">2400</span>; index++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((Pict[index] &amp; (<span class="number">1</span> &lt;&lt; i)) == <span class="number">0x00</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                LCD_WriteRAM(BackColor);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                LCD_WriteRAM(TextColor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : LCD_WriteBMP</span></span><br><span class="line"><span class="comment">* Description    : Displays a bitmap picture loaded in the internal Flash.</span></span><br><span class="line"><span class="comment">* Input          : - BmpAddress: Bmp picture address in the internal Flash.</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_WriteBMP</span><span class="params">(u32 BmpAddress)</span></span><br><span class="line">&#123;</span><br><span class="line">    u32 index = <span class="number">0</span>, size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    size = *(vu16 *) (BmpAddress + <span class="number">2</span>);</span><br><span class="line">    size |= (*(vu16 *) (BmpAddress + <span class="number">4</span>)) &lt;&lt; <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    index = *(vu16 *) (BmpAddress + <span class="number">10</span>);</span><br><span class="line">    index |= (*(vu16 *) (BmpAddress + <span class="number">12</span>)) &lt;&lt; <span class="number">16</span>;</span><br><span class="line">    size = (size - index) / <span class="number">2</span>;</span><br><span class="line">    BmpAddress += index;</span><br><span class="line"></span><br><span class="line">    LCD_WriteReg(R3, <span class="number">0x1008</span>);</span><br><span class="line">    LCD_WriteRAM_Prepare();</span><br><span class="line">    <span class="keyword">for</span>(index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">    &#123;</span><br><span class="line">        LCD_WriteRAM(*(vu16 *)BmpAddress);</span><br><span class="line">        BmpAddress += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LCD_WriteReg(R3, <span class="number">0x1018</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : LCD_WriteReg</span></span><br><span class="line"><span class="comment">* Description    : Writes to the selected LCD register.</span></span><br><span class="line"><span class="comment">* Input          : - LCD_Reg: address of the selected register.</span></span><br><span class="line"><span class="comment">*                  - LCD_RegValue: value to write to the selected register.</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_WriteReg</span><span class="params">(u8 LCD_Reg, u16 LCD_RegValue)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOB-&gt;BRR  |= GPIO_PIN_9;</span><br><span class="line">    GPIOB-&gt;BRR  |= GPIO_PIN_8;</span><br><span class="line">    GPIOB-&gt;BSRR |= GPIO_PIN_5;</span><br><span class="line"></span><br><span class="line">    GPIOC-&gt;ODR = LCD_Reg;</span><br><span class="line">    GPIOB-&gt;BRR  |= GPIO_PIN_5;</span><br><span class="line">    __nop();</span><br><span class="line">    __nop();</span><br><span class="line">    __nop();</span><br><span class="line">    GPIOB-&gt;BSRR |= GPIO_PIN_5;</span><br><span class="line">    GPIOB-&gt;BSRR |= GPIO_PIN_8;</span><br><span class="line"></span><br><span class="line">    GPIOC-&gt;ODR = LCD_RegValue;</span><br><span class="line">    GPIOB-&gt;BRR  |= GPIO_PIN_5;</span><br><span class="line">    __nop();</span><br><span class="line">    __nop();</span><br><span class="line">    __nop();</span><br><span class="line">    GPIOB-&gt;BSRR |= GPIO_PIN_5;</span><br><span class="line">    GPIOB-&gt;BSRR |= GPIO_PIN_8;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : LCD_ReadReg</span></span><br><span class="line"><span class="comment">* Description    : Reads the selected LCD Register.</span></span><br><span class="line"><span class="comment">* Input          : None</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : LCD Register Value.</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line">u16 <span class="title function_">LCD_ReadReg</span><span class="params">(u8 LCD_Reg)</span></span><br><span class="line">&#123;</span><br><span class="line">    u16 temp;</span><br><span class="line"></span><br><span class="line">    GPIOB-&gt;BRR |= GPIO_PIN_9;</span><br><span class="line">    GPIOB-&gt;BRR |= GPIO_PIN_8;</span><br><span class="line">    GPIOB-&gt;BSRR |= GPIO_PIN_5;</span><br><span class="line"></span><br><span class="line">    GPIOC-&gt;ODR = LCD_Reg;</span><br><span class="line">    GPIOB-&gt;BRR |= GPIO_PIN_5;</span><br><span class="line">    __nop();</span><br><span class="line">    __nop();</span><br><span class="line">    __nop();</span><br><span class="line">    GPIOB-&gt;BSRR |= GPIO_PIN_5;</span><br><span class="line">    GPIOB-&gt;BSRR |= GPIO_PIN_8;</span><br><span class="line"></span><br><span class="line">    LCD_BusIn();</span><br><span class="line">    GPIOA-&gt;BRR |= GPIO_PIN_8;</span><br><span class="line">    __nop();</span><br><span class="line">    __nop();</span><br><span class="line">    __nop();</span><br><span class="line">    temp = GPIOC-&gt;IDR;</span><br><span class="line">    GPIOA-&gt;BSRR |= GPIO_PIN_8;</span><br><span class="line"></span><br><span class="line">    LCD_BusOut();</span><br><span class="line">    GPIOB-&gt;BSRR |= GPIO_PIN_9;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : LCD_WriteRAM_Prepare</span></span><br><span class="line"><span class="comment">* Description    : Prepare to write to the LCD RAM.</span></span><br><span class="line"><span class="comment">* Input          : None</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_WriteRAM_Prepare</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOB-&gt;BRR  |=  GPIO_PIN_9;</span><br><span class="line">    GPIOB-&gt;BRR  |=  GPIO_PIN_8;</span><br><span class="line">    GPIOB-&gt;BSRR |=  GPIO_PIN_5;</span><br><span class="line"></span><br><span class="line">    GPIOC-&gt;ODR = R34;</span><br><span class="line">    GPIOB-&gt;BRR  |=  GPIO_PIN_5;</span><br><span class="line">    __nop();</span><br><span class="line">    __nop();</span><br><span class="line">    __nop();</span><br><span class="line">    GPIOB-&gt;BSRR |=  GPIO_PIN_5;</span><br><span class="line">    GPIOB-&gt;BSRR |=  GPIO_PIN_8;</span><br><span class="line">    __nop();</span><br><span class="line">    __nop();</span><br><span class="line">    __nop();</span><br><span class="line">    GPIOB-&gt;BSRR |=  GPIO_PIN_9;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : LCD_WriteRAM</span></span><br><span class="line"><span class="comment">* Description    : Writes to the LCD RAM.</span></span><br><span class="line"><span class="comment">* Input          : - RGB_Code: the pixel color in RGB mode (5-6-5).</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_WriteRAM</span><span class="params">(u16 RGB_Code)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIOB-&gt;BRR  |=  GPIO_PIN_9;</span><br><span class="line">    GPIOB-&gt;BSRR |=  GPIO_PIN_8;</span><br><span class="line">    GPIOB-&gt;BSRR |=  GPIO_PIN_5;</span><br><span class="line"></span><br><span class="line">    GPIOC-&gt;ODR = RGB_Code;</span><br><span class="line">    GPIOB-&gt;BRR  |=  GPIO_PIN_5;</span><br><span class="line">    __nop();</span><br><span class="line">    __nop();</span><br><span class="line">    __nop();</span><br><span class="line">    GPIOB-&gt;BSRR |=  GPIO_PIN_5;</span><br><span class="line">    GPIOB-&gt;BSRR |=  GPIO_PIN_8;</span><br><span class="line">    __nop();</span><br><span class="line">    __nop();</span><br><span class="line">    __nop();</span><br><span class="line">    GPIOB-&gt;BSRR |=  GPIO_PIN_9;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : LCD_ReadRAM</span></span><br><span class="line"><span class="comment">* Description    : Reads the LCD RAM.</span></span><br><span class="line"><span class="comment">* Input          : None</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : LCD RAM Value.</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line">u16 <span class="title function_">LCD_ReadRAM</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    u16 temp;</span><br><span class="line"></span><br><span class="line">    GPIOB-&gt;BRR  |=  GPIO_PIN_9;</span><br><span class="line">    GPIOB-&gt;BRR  |=  GPIO_PIN_8;</span><br><span class="line">    GPIOB-&gt;BSRR |=  GPIO_PIN_5;</span><br><span class="line"></span><br><span class="line">    GPIOC-&gt;ODR = R34;</span><br><span class="line">    GPIOB-&gt;BRR  |=  GPIO_PIN_5;</span><br><span class="line">    __nop();</span><br><span class="line">    __nop();</span><br><span class="line">    __nop();</span><br><span class="line">    GPIOB-&gt;BSRR |=  GPIO_PIN_5;</span><br><span class="line">    GPIOB-&gt;BSRR |=  GPIO_PIN_8;</span><br><span class="line"></span><br><span class="line">    LCD_BusIn();</span><br><span class="line">    GPIOA-&gt;BRR |=  GPIO_PIN_8;</span><br><span class="line">    __nop();</span><br><span class="line">    __nop();</span><br><span class="line">    __nop();</span><br><span class="line">    temp = GPIOC-&gt;IDR;</span><br><span class="line">    GPIOA-&gt;BSRR |=  GPIO_PIN_8;</span><br><span class="line"></span><br><span class="line">    LCD_BusOut();</span><br><span class="line">    GPIOB-&gt;BSRR |=  GPIO_PIN_9;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : LCD_PowerOn</span></span><br><span class="line"><span class="comment">* Description    : Power on the LCD.</span></span><br><span class="line"><span class="comment">* Input          : None</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_PowerOn</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    LCD_WriteReg(R16, <span class="number">0x0000</span>);</span><br><span class="line">    LCD_WriteReg(R17, <span class="number">0x0000</span>);</span><br><span class="line">    LCD_WriteReg(R18, <span class="number">0x0000</span>);</span><br><span class="line">    LCD_WriteReg(R19, <span class="number">0x0000</span>);</span><br><span class="line">    Delay_LCD(<span class="number">20</span>);</span><br><span class="line">    LCD_WriteReg(R16, <span class="number">0x17B0</span>);</span><br><span class="line">    LCD_WriteReg(R17, <span class="number">0x0137</span>);</span><br><span class="line">    Delay_LCD(<span class="number">5</span>);</span><br><span class="line">    LCD_WriteReg(R18, <span class="number">0x0139</span>);</span><br><span class="line">    Delay_LCD(<span class="number">5</span>);</span><br><span class="line">    LCD_WriteReg(R19, <span class="number">0x1d00</span>);</span><br><span class="line">    LCD_WriteReg(R41, <span class="number">0x0013</span>);</span><br><span class="line">    Delay_LCD(<span class="number">5</span>);</span><br><span class="line">    LCD_WriteReg(R7, <span class="number">0x0173</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : LCD_DisplayOn</span></span><br><span class="line"><span class="comment">* Description    : Enables the Display.</span></span><br><span class="line"><span class="comment">* Input          : None</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_DisplayOn</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    LCD_WriteReg(R7, <span class="number">0x0173</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : LCD_DisplayOff</span></span><br><span class="line"><span class="comment">* Description    : Disables the Display.</span></span><br><span class="line"><span class="comment">* Input          : None</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_DisplayOff</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    LCD_WriteReg(R7, <span class="number">0x0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : LCD_CtrlLinesConfig</span></span><br><span class="line"><span class="comment">* Description    : Configures LCD Control lines.</span></span><br><span class="line"><span class="comment">                   Push-Pull mode.</span></span><br><span class="line"><span class="comment">* Input          : None</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_CtrlLinesConfig</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    __HAL_RCC_GPIOC_CLK_ENABLE();</span><br><span class="line">    __HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line">    __HAL_RCC_GPIOB_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">    GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9;</span><br><span class="line">    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;</span><br><span class="line">    GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">    HAL_GPIO_Init(GPIOB, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">    GPIO_InitStruct.Pin =  GPIO_PIN_8 ;</span><br><span class="line">    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;</span><br><span class="line">    GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">    HAL_GPIO_Init(GPIOA, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">    LCD_BusOut();</span><br><span class="line"></span><br><span class="line">    GPIOA-&gt;BSRR |= <span class="number">0x0100</span>;</span><br><span class="line">    GPIOB-&gt;BSRR |= <span class="number">0x0220</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : LCD_BusIn</span></span><br><span class="line"><span class="comment">* Description    : Configures the Parallel interface for LCD(PortC)</span></span><br><span class="line"><span class="comment">* Input          : None</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_BusIn</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    GPIO_InitStruct.Pin = GPIO_PIN_All;</span><br><span class="line">    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;</span><br><span class="line">    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;</span><br><span class="line">    GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">    HAL_GPIO_Init(GPIOC, &amp;GPIO_InitStruct);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : LCD_BusOut</span></span><br><span class="line"><span class="comment">* Description    : Configures the Parallel interface for LCD(PortC)</span></span><br><span class="line"><span class="comment">* Input          : None</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_BusOut</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    GPIO_InitStruct.Pin = GPIO_PIN_All;</span><br><span class="line">    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;</span><br><span class="line">    GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">    HAL_GPIO_Init(GPIOC, &amp;GPIO_InitStruct);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">* Function Name  : LCD_DrawPicture</span></span><br><span class="line"><span class="comment">* Description    : Displays a 16 color picture.</span></span><br><span class="line"><span class="comment">* Input          : - picture: pointer to the picture array.</span></span><br><span class="line"><span class="comment">* Output         : None</span></span><br><span class="line"><span class="comment">* Return         : None</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD_DrawPicture</span><span class="params">(<span class="type">const</span> u8 *picture)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> index;</span><br><span class="line">    LCD_SetCursor(<span class="number">0x00</span>, <span class="number">0x0000</span>);</span><br><span class="line"></span><br><span class="line">    LCD_WriteRAM_Prepare(); <span class="comment">/* Prepare to write GRAM */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(index = <span class="number">0</span>; index &lt; <span class="number">76800</span>; index++)</span><br><span class="line">    &#123;</span><br><span class="line">        LCD_WriteRAM(picture[<span class="number">2</span> * index + <span class="number">1</span>] &lt;&lt; <span class="number">8</span> | picture[<span class="number">2</span> * index]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/************************User Defined Functions********************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">My_LCD_Init</span><span class="params">(u16 Background_Color, vu16 Text_Color)</span></span><br><span class="line">&#123;</span><br><span class="line">  LCD_Init();</span><br><span class="line">  LCD_Clear(Background_Color);</span><br><span class="line">  LCD_SetBackColor(Background_Color);</span><br><span class="line">  LCD_SetTextColor(Text_Color);</span><br><span class="line">  </span><br><span class="line">  LCD_DisplayStringLine(Line0, (<span class="type">uint8_t</span>*)<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">  HAL_Delay(<span class="number">5000</span>);</span><br><span class="line">  LCD_Clear(Background_Color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><em>The .h file need you to define by yourselves. And after you add the files’ path and include the .h files, you will be able to use the function and show information, even picture if you like.</em></strong></p><p>Tips:</p><ul><li>The initial background color is white, and we provide a function called <span style="color: red; font-size: 20px">LCD_SetBackColor(vu16 Color)</span> which can set the background of your text to any define color as its default color is white. </li><li>However, when you use this function, you may find out that only the space where you show texts will change its background color. And other place is still white. So you need <span style="color: red; font-size: 20px">LCD_Clear(u16 Color)</span> which can clear and set the whole LCD to one background color. So we usually set color and clear with the color as necessary step for init.</li><li>After you set the background color, you may want to change the text color for better performance. Then you can write <span style="color: red; font-size: 20px">LCD_SetTextColor(vu16 Color)</span>. So that you finish all the basic init step.</li></ul><h3 id="Key-Trigger-mode-and-event"><a href="#Key-Trigger-mode-and-event" class="headerlink" title="Key - Trigger mode and event"></a>Key - Trigger mode and event</h3><p><strong><em>One key bottom contains different trigger mode such as single-press, double-press, long-press and so on. So it is important to define how you memorize keys’ states and judge its trigger event. In this blog, we use structure to store info of key, and the relevant define as followed.</em></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Key</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">uint8_t</span> long_press;   <span class="comment">// long press check (count times)</span></span><br><span class="line">  <span class="type">uint8_t</span> judge_sta;    <span class="comment">// whether the key is press when last time enter callback(when the key is press)</span></span><br><span class="line">  <span class="type">bool</span> now_key;         <span class="comment">// the key state when enter TIM callback</span></span><br><span class="line">  <span class="type">bool</span> Ispress;         <span class="comment">// Flag of key is pressed</span></span><br><span class="line">&#125;Key;</span><br></pre></td></tr></table></figure><p><strong><em>You need to set a TIM(This blog uses TIM3) and configure its <span style="color: red">Prescaler</span> and <span style="color: red">Period</span> value to make your timer enter interrupt callback function every 10ms(the time between twice key check to eliminate the error caused by key itself) one time.</em></strong></p><p><strong><em>And you need to rewrite the Period elapsed callback function, check and judge the key event in the callback function. The concrete code is below.</em></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">Key keys[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;     <span class="comment">// define a list to store 4 keys&#x27; structure</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_PeriodElapsedCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// judge which TIMER finish its period(important especially when you have different TIMER callback)</span></span><br><span class="line">  <span class="keyword">if</span> (htim-&gt;Instance == TIM3)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// every 10ms(Timer CallBack time) check key state and update the value of now_key</span></span><br><span class="line">    keys[<span class="number">0</span>].now_key = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);</span><br><span class="line">    keys[<span class="number">1</span>].now_key = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);</span><br><span class="line">    keys[<span class="number">2</span>].now_key = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);</span><br><span class="line">    keys[<span class="number">3</span>].now_key = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// for every key judge one time</span></span><br><span class="line">    <span class="comment">// judge 1 times per 10ms (Delay to eliminate the error of key)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">switch</span> (keys[i].judge_sta)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// key wasn&#x27;t press before</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// the first check is pressed.</span></span><br><span class="line">          <span class="keyword">if</span> (keys[i].now_key == <span class="number">0</span>) keys[i].judge_sta = <span class="number">1</span>;  <span class="comment">// this time the key is check press</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// key is checked to be pressed last time</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// the second check is also pressed.</span></span><br><span class="line">          <span class="keyword">if</span> (keys[i].now_key == <span class="number">0</span>) </span><br><span class="line">          &#123;</span><br><span class="line">            keys[i].judge_sta = <span class="number">2</span>;</span><br><span class="line">            keys[i].Ispress = <span class="number">1</span>;      <span class="comment">// The key is truly pressed</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// the second check failed. It is an error and init again.</span></span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            keys[i].judge_sta = <span class="number">0</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> (keys[i].now_key == <span class="number">1</span>)</span><br><span class="line">          &#123;</span><br><span class="line">            keys[i].judge_sta = <span class="number">0</span>;  <span class="comment">// leave the key and return judge&#x27;s value. Start next press check.</span></span><br><span class="line">            <span class="comment">// If want a leave check(one press event when leave key)</span></span><br><span class="line">            <span class="comment">// Write: keys[i].Ispress = 1;</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// hold the key</span></span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">// judge is 2 unless leave key. The long press is continue plus(limit to 100 -&gt; 1s).</span></span><br><span class="line">            keys[i].long_press++;</span><br><span class="line">            <span class="keyword">if</span> (keys[i].long_press &gt;= <span class="number">100</span>) keys[i].long_press = <span class="number">100</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>The code contains detailed comments which can help you understand how it works. And you can write more judge function with this concept. And the overall method is every 10ms read the keys’ value which is set to high as default.</em></strong></p><p><strong><em>And as judge is 0 at first, all the key will enter the case:0. And then if this time read pin is low which means the key is pressed, it will set judge to 1. When next 10ms enter the callback function, read pins’ state as well, but this time will enter case:1 as judge is set to 1 at the last 10ms.</em></strong></p><p><strong><em>If this time read pin is still low(key pressed), set the judge to 2 and Ispress to 1 which indicate that the key is truly pressed. Else, it indicates that it is an error so reset the judge value to 0. The case:2 means only if you leave the key that you can start next event, which avoid continuously triggering if you hold the key. Also I add a long-press check in the case:2.</em></strong></p><p><strong><em>If you hold the key, the judge is always 2 and enter case:2 every 10ms. In this way, if you enter the case:2, the long_press add one and if you enter for over 100 times we suppose it is a long press and limit it to 100 which means long press.</em></strong></p><p><strong><em>What is more? You can define a clear function to clear the state value after you read the value in main function which is like:</em></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">clear_keys</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    keys[i].Ispress = <span class="number">0</span>;</span><br><span class="line">    keys[i].judge_sta = <span class="number">0</span>;</span><br><span class="line">    keys[i].long_press = <span class="number">0</span>;</span><br><span class="line">    keys[i].now_key = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>Above is all the content for these three modules. I will start the next study log soon, please wait and see!</em></strong></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LanQiao </tag>
            
            <tag> STM32 </tag>
            
            <tag> GPIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to quickly start Markdown</title>
      <link href="/2024/11/13/Quick-start-Markdown/"/>
      <url>/2024/11/13/Quick-start-Markdown/</url>
      
        <content type="html"><![CDATA[<h1 id="How-to-quickly-start-Markdown-edition"><a href="#How-to-quickly-start-Markdown-edition" class="headerlink" title="How to quickly start Markdown edition"></a><em><strong>How to quickly start Markdown edition</strong></em></h1><h2 id="Text-purpose"><a href="#Text-purpose" class="headerlink" title="Text purpose:"></a><em><strong>Text purpose:</strong></em></h2><p><em><strong>This text is written for those who want to use markdown to edit their posts or reports but have no idea about how to start.<br>Or for people knowing the basic operation of markdown but want to edit a beautiful markdown file. Even you can perceive it file as a memo!</strong></em></p><h2 id="Operation-conclusion"><a href="#Operation-conclusion" class="headerlink" title="Operation conclusion"></a><em><strong>Operation conclusion</strong></em></h2><ul><li><h3 id="Bold-and-Italics"><a href="#Bold-and-Italics" class="headerlink" title="Bold and Italics"></a><em><strong>Bold and Italics</strong></em></h3></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bold -&gt; <span class="strong">**Text here**</span> and Italics -&gt; <span class="emphasis">_Text Here_</span></span><br></pre></td></tr></table></figure><p>And the present effects like <strong>Bold</strong> and <em>Italics</em>. To give more details, you can <em><strong>Nest</strong></em> one another to create <em><strong>Bold and Italics</strong></em> word.</p><ul><li><h3 id="Delete-Line"><a href="#Delete-Line" class="headerlink" title="Delete Line"></a><em><strong>Delete Line</strong></em></h3></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Delete line -&gt; ~~Text Here~~</span><br></pre></td></tr></table></figure><p>The effect is like <em><strong><del>Delete text</del></strong></em>. You can use this to emphasize the change from th original or the false it used to be.</p><ul><li><h3 id="Code-Block"><a href="#Code-Block" class="headerlink" title="Code Block"></a><em><strong>Code Block</strong></em></h3></li></ul><p>You can nest code by using:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;<span class="code">```(type) text here```</span>&quot;</span><br></pre></td></tr></table></figure><ul><li><h3 id="Link-and-Image"><a href="#Link-and-Image" class="headerlink" title="Link and Image"></a><em><strong>Link and Image</strong></em></h3></li></ul><p>You can insert <em><strong>Link</strong></em> or <em><strong>Image</strong></em> by:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># insert link </span></span><br><span class="line">[<span class="string">Visit Kimi</span>](<span class="link">https://kimi.ai</span>) -&gt; [<span class="string">explain your link</span>](<span class="link">https://website.link.here</span>)</span><br><span class="line"></span><br><span class="line"><span class="section"># insert image</span></span><br><span class="line">![<span class="string">Example image</span>](<span class="link">/public/img/rene.jpg</span>)</span><br></pre></td></tr></table></figure><p>And the effect is like <a href="https://kimi.ai/">Visit Kimi</a><br>and image is like <img src="/../img/rene.jpg" alt="Example image"></p><ul><li><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; This is a refer text</span></span><br></pre></td></tr></table></figure><p>The effect is like the referred file is below. </p><blockquote><p>Referred articles. </p></blockquote><ul><li><h3 id="Divided-Line"><a href="#Divided-Line" class="headerlink" title="Divided Line"></a>Divided Line</h3></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;<span class="strong">__<span class="emphasis">_&#x27; is a horizon line.</span></span></span><br></pre></td></tr></table></figure><p>Text up</p><hr><p>Text down</p><ul><li><h3 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h3></li></ul><table><thead><tr><th>col 1</th><th>col 2</th></tr></thead><tbody><tr><td>content 1</td><td>content 2</td></tr></tbody></table><p>The code is like </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| col 1     | col 2     |</span><br><span class="line">|-----------|-----------|</span><br><span class="line">| content 1 | content 2 |</span><br></pre></td></tr></table></figure><h2 id="More-fancy-style"><a href="#More-fancy-style" class="headerlink" title="More fancy style"></a><em><strong>More fancy style</strong></em></h2><p>The most used Markdown format is all above, but you can achieve more fancy style if you want by writing html as Markdown file support this HTML grammar.</p><p>And using HTML, you can easily change fonts’ size, color, and many different style which Markdown can’t realize.</p><h3 id="For-examples"><a href="#For-examples" class="headerlink" title="For examples"></a><em><strong>For examples</strong></em></h3><p>If you want change font size of specific word between a sentence like ‘This is the <span style="font-size: 24px">Large Word</span> in a sentence.’</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 24pt; color: #00c4b6; background-color: white;&quot;</span>&gt;</span>Large Word<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Similarly, the style contain many different attributes like ‘font-size’, ‘color’, ‘background-color’ and etc.</p><p><span style="background-color: white; font-size: 20pt; color: #00c4b6">This is an example</span></p><h2 id="Latex-equation"><a href="#Latex-equation" class="headerlink" title="Latex equation"></a><em><strong>Latex equation</strong></em></h2><p>When people want to write equations or some math symbols they may get mad due to Markdown being really pool at this point. On the other side, Latex, another edition tool, is especially good at math equation edition.</p><h3 id="For-examples-1"><a href="#For-examples-1" class="headerlink" title="For examples"></a><em><strong>For examples</strong></em></h3><p>If you want inset a equation to support your theory then you can write<br>$$a + b &#x3D; c$$<br>by </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$your equation$$</span><br></pre></td></tr></table></figure><p>Also you can write Latex symbol or command between two ‘$$’.</p><p>For an example, you can write fraction by using \frac{}{}<br>$$F_{s} &#x3D; \frac{1}{T_{sample}}$$</p>]]></content>
      
      
      
        <tags>
            
            <tag> file edition </tag>
            
            <tag> quick learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/11/12/hello-world/"/>
      <url>/2024/11/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
